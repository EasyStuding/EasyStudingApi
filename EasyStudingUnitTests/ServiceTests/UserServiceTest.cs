using EasyStudingRepositories.DbContext;
using EasyStudingUnitTests.TestData.Repositories;
using EasyStudingServices.Services;
using EasyStudingModels.DbContextModels;
using EasyStudingModels.ApiModels;
using EasyStudingUnitTests.TestData;
using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Xunit;

namespace EasyStudingUnitTests.ServiceTests
{
    public class UserServiceTest
    {
        private EasyStudingContext Context;

        [Fact(DisplayName = "UserService.GetApiUserDescriptionModels(null, null) should return 5 objects.")]
        public async void UserService_GetApiUserDescriptionModels_null_null_should_return_5_objects()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );
                var result = await service.GetApiUserDescriptionModels(null, null);

                Assert.Equal(5, result.Count());
            }
        }

        [Fact(DisplayName = "UserService.GetApiUserDescriptionModels(invalid, null) should return FormatException.")]
        public void UserService_GetApiUserDescriptionModels_invalid_null_should_return_FormatException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<FormatException>(
                    async () => await service
                                .GetApiUserDescriptionModels(
                        new ApiEducationModel() { Id = 1, City = null, Country = null, EducationName = null, Educationtype = null },
                        null));

                Assert.Equal(typeof(FormatException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.GetApiUserDescriptionModels(null, out index) should return IndexOutOfRangeException.")]
        public void UserService_GetApiUserDescriptionModels_null_outIndex_should_return_IndexOutOfRangeException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<IndexOutOfRangeException>(
                    async () => await service
                                .GetApiUserDescriptionModels(
                        null,
                        new City() { Id = 7, CountryId = 1, Name = "city", Region = null }));

                Assert.Equal(typeof(IndexOutOfRangeException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.GetApiUserDescriptionModel(1) should return first object.")]
        public async void UserService_GetApiUserDescriptionModel_1_should_return_first_object()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = await service.GetApiUserDescriptionModel(1);

                Assert.Equal(1, result.Id);
            }
        }

        [Fact(DisplayName = "UserService.GetApiUserDescriptionModel(6) should return ArgumentNullException.")]
        public void UserService_GetApiUserDescriptionModel_6_should_return_ArgumentNullException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<ArgumentNullException>(
                    async () => await service
                                .GetApiUserDescriptionModel(6));

                Assert.Equal(typeof(ArgumentNullException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.GetApiOrderDetailsModels(1) should return 1 object.")]
        public async void UserService_GetApiOrderDetailsModels_1_should_return_1_object()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );
                var result = await service.GetApiOrderDetailsModels(1);

                Assert.Equal(1, result.Count());
            }
        }

        [Fact(DisplayName = "UserService.GetApiUserDescriptionModels(7) should return UnauthorizedAccessException.")]
        public void UserService_GetApiUserDescriptionModels_7_should_return_UnauthorizedAccessException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<UnauthorizedAccessException>(
                    async () => await service
                                .GetApiOrderDetailsModels(7));

                Assert.Equal(typeof(UnauthorizedAccessException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.GetApiOrderDetailsModel(1, 1) should return first object.")]
        public async void UserService_GetApiOrderDetailsModell_1_1_should_return_first_object()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = await service.GetApiOrderDetailsModel(1, 1);

                Assert.Equal(1, result.Id);
            }
        }

        [Fact(DisplayName = "UserService.GetApiOrderDetailsModel(6, 1) should return ArgumentNullException.")]
        public void UserService_GetApiOrderDetailsModel_6_1_should_return_ArgumentNullException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<ArgumentNullException>(
                    async () => await service
                                .GetApiOrderDetailsModel(6, 1));

                Assert.Equal(typeof(ArgumentNullException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.GetApiOrderDetailsModel(1, 4) should return UnauthorizedAccessException.")]
        public void UserService_GetApiOrderDetailsModel_1_4_should_return_UnauthorizedAccessException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<UnauthorizedAccessException>(
                    async () => await service
                                .GetApiOrderDetailsModel(1, 4));

                Assert.Equal(typeof(UnauthorizedAccessException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.GetSubscriptionExecutors(null, null) should return 5 objects.")]
        public async void UserService_GetSubscriptionExecutors_null_null_should_return_5_objects()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );
                var result = await service.GetSubscriptionExecutors(null, null);

                Assert.Equal(5, result.Count());
            }
        }

        [Fact(DisplayName = "UserService.GetSubscriptionExecutors(invalid, null) should return FormatException.")]
        public void UserService_GetSubscriptionExecutors_invalid_null_should_return_FormatException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<FormatException>(
                    async () => await service
                                .GetSubscriptionExecutors(
                        new ApiEducationModel() { Id = 1, City = null, Country = null, EducationName = null, Educationtype = null },
                        null));

                Assert.Equal(typeof(FormatException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.GetSubscriptionExecutors(null, out index) should return IndexOutOfRangeException.")]
        public void UserService_GetSubscriptionExecutors_null_outIndex_should_return_IndexOutOfRangeException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<IndexOutOfRangeException>(
                    async () => await service
                                .GetSubscriptionExecutors(
                        null,
                        new City() { Id = 7, CountryId = 1, Name = "city", Region = null }));

                Assert.Equal(typeof(IndexOutOfRangeException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.ChangePassword('password1', 'Password11', 1) should return true.")]
        public async void UserService_ChangePassword_password1_Password11_1_should_return_true()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = await service.ChangePassword("password1", "Password11", 1);

                Assert.True(result);
            }
        }

        [Fact(DisplayName = "UserService.ChangePassword(valid, invalid, 1) should return FormatException.")]
        public void UserService_ChangePassword_valid_invalid_1_should_return_FormatException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<FormatException>(
                    async () => await service
                                .ChangePassword("password1", "asdfsadfasdfsadfsadfsa", 1));

                Assert.Equal(typeof(FormatException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.ChangePassword(valid, valid, 6) should return IndexOutOfRangeException.")]
        public void UserService_ChangePassword_valid_valid_6_should_return_IndexOutOfRangeException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<IndexOutOfRangeException>(
                    async () => await service
                                .ChangePassword("password6", "Password66", 6));

                Assert.Equal(typeof(IndexOutOfRangeException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.EditProfile(valid, 1) should return object id 1.")]
        public async void UserService_EditProfile_valid_1_should_return_object_1()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = await service.EditProfile(new ApiUserDescriptionModel()
                {
                    Id = 1,
                    UserInformation = new ApiUserInformationModel()
                    {
                        Id = 1,
                        IsBanned = false,
                        IsFreeTrial = false,
                        IsGaranted = false,
                        IsSubscribedExecutor = false,
                        IsSubscribedOpenSource = false,
                        LoginName = "login1",
                        Role = "user",
                        TelephoneNumber = "+375331111111"
                    },
                    Description = "desc",
                    FirstName = "fname",
                    LastName = "lname"
                }, 1);

                Assert.Equal(1, result.Id);
            }
        }

        [Fact(DisplayName = "UserService.EditProfile(invalid, 1) should return FormatException.")]
        public void UserService_EditProfile_invalid_1_should_return_FormatException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<FormatException>(
                    async () => await service
                                .EditProfile(new ApiUserDescriptionModel() { Id = 1 }, 1));

                Assert.Equal(typeof(FormatException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.EditProfile(valid, 6) should return IndexOutOfRangeException.")]
        public void UserService_EditProfile_valid_6_should_return_IndexOutOfRangeException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<IndexOutOfRangeException>(
                    async () => await service
                                .EditProfile(new ApiUserDescriptionModel()
                                {
                                    Id = 1,
                                    UserInformation = new ApiUserInformationModel()
                                    {
                                        Id = 6,
                                        IsBanned = false,
                                        IsFreeTrial = false,
                                        IsGaranted = false,
                                        IsSubscribedExecutor = false,
                                        IsSubscribedOpenSource = false,
                                        LoginName = "login1",
                                        Role = "user",
                                        TelephoneNumber = "+375331111111"
                                    },
                                    Description = "desc",
                                    FirstName = "fname",
                                    LastName = "lname"
                                }, 6));

                Assert.Equal(typeof(IndexOutOfRangeException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.EditProfile(valid, 5) should return InvalidOperationException.")]
        public void UserService_EditProfile_valid_invalid_1_should_return_InvalidOperationException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<InvalidOperationException>(
                    async () => await service
                                .EditProfile(new ApiUserDescriptionModel()
                                {
                                    Id = 1,
                                    UserInformation = new ApiUserInformationModel()
                                    {
                                        Id = 6,
                                        IsBanned = false,
                                        IsFreeTrial = false,
                                        IsGaranted = false,
                                        IsSubscribedExecutor = false,
                                        IsSubscribedOpenSource = false,
                                        LoginName = "login1",
                                        Role = "user",
                                        TelephoneNumber = "+375331111111"
                                    },
                                    Description = "desc",
                                    FirstName = "fname",
                                    LastName = "lname"
                                }, 5));

                Assert.Equal(typeof(InvalidOperationException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.AddPictureProfile(valid, 1) should return object type image/png.")]
        public async void UserService_AddPictureProfile_valid_1_should_return_object_type_image_png()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );
                var result = await service.AddPictureProfile(new ApiFileToAddModel() {
                    UserId = 1,
                    #region Base64 data
                    Data = "iVBORw0KGgoAAAANSUhEUgAABjQAAAaoCAYAAAAkuTKqAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAP + lSURBVHhe7P1PaFxpnid6 / zz3HWZ2Nn2Hl5emuTBKSZkjkobxQtVD + vIubttJoKxBuXBurUU6Iw1Nhe + LnaSLbBi4HgQtLxwNL84o50JioOGmF6W691UHZdObwjlFiRzDFI0gQ7IXsxlqMVUyVEP9Wfg9z4lzpJAs2SHr34mIzyc5Gec88ZyIY + lRxInzjed5zrzIBAAAAAAAQIX9s + IWAAAAAACgsgQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + ",
                    #endregion
                    Name = "PhotoProfile1",
                    Type = "image/png" }, 1);

                Assert.Equal("image/png", result.Type);
            }
        }

        [Fact(DisplayName = "UserService.AddPictureProfile(invalid, 1) should return FormatException.")]
        public void UserService_AddPictureProfile_invalid_1_should_return_FormatException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<FormatException>(
                    async () => await service.AddPictureProfile(new ApiFileToAddModel()
                    {
                        UserId = 1,
                        #region Base64 data
                        Data = "iVBORw0KGgoAAAANSUhEUgAABjQAAAaoCAYAAAAkuTKqAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAP + lSURBVHhe7P1PaFxpnid6 / zz3HWZ2Nn2Hl5emuTBKSZkjkobxQtVD + vIubttJoKxBuXBurUU6Iw1Nhe + LnaSLbBi4HgQtLxwNL84o50JioOGmF6W691UHZdObwjlFiRzDFI0gQ7IXsxlqMVUyVEP9Wfg9z4lzpJAs2SHr34mIzyc5Gec88ZyIY + lRxInzjed5zrzIBAAAAAAAQIX9s + IWAAAAAACgsgQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + ",
                        #endregion
                        Name = "PhotoProfile1",
                        Type = ""
                    }, 1));

                Assert.Equal(typeof(FormatException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.AddPictureProfile(valid, 6) should return IndexOutOfRangeException.")]
        public void UserService_AddPictureProfile_valid_6_should_return_IndexOutOfRangeException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<IndexOutOfRangeException>(
                    async () => await service.AddPictureProfile(new ApiFileToAddModel()
                    {
                        UserId = 6,
                        #region Base64 data
                        Data = "iVBORw0KGgoAAAANSUhEUgAABjQAAAaoCAYAAAAkuTKqAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAP + lSURBVHhe7P1PaFxpnid6 / zz3HWZ2Nn2Hl5emuTBKSZkjkobxQtVD + vIubttJoKxBuXBurUU6Iw1Nhe + LnaSLbBi4HgQtLxwNL84o50JioOGmF6W691UHZdObwjlFiRzDFI0gQ7IXsxlqMVUyVEP9Wfg9z4lzpJAs2SHr34mIzyc5Gec88ZyIY + lRxInzjed5zrzIBAAAAAAAQIX9s + IWAAAAAACgsgQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + ",
                        #endregion
                        Name = "PhotoProfile1",
                        Type = "image/png"
                    }, 1));

                Assert.Equal(typeof(IndexOutOfRangeException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.RemovePictureProfile(1, 1) should return object.")]
        public async void UserService_RemovePictureProfile_valid_1_should_return_object_type_image_png()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );
                var result = await service.RemovePictureProfile(1, 1);

                Assert.Equal(typeof(ApiFileToReturnModel), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.RemovePictureProfile(6, 1) should return IndexOutOfRangeException.")]
        public void UserService_RemovePictureProfile_valid_6_should_return_IndexOutOfRangeException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<IndexOutOfRangeException>(
                    async () => await service.RemovePictureProfile(6, 1));

                Assert.Equal(typeof(IndexOutOfRangeException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.RemovePictureProfile(1, 2) should return InvalidOperationException.")]
        public void UserService_RemovePictureProfile_valid_6_should_return_InvalidOperationException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<InvalidOperationException>(
                    async () => await service.RemovePictureProfile(1, 2));

                Assert.Equal(typeof(InvalidOperationException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.RequestToBuySubscription(valid, 1) should return object id 1.")]
        public async void UserService_RequestToBuySubscription_valid_1_should_return_object_1()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = await service.RequestToBuySubscription(new Cost() { Id = 1, Money = 3, Product = "opensource" }, 1);

                Assert.Equal(1, result.Id);
            }
        }

        [Fact(DisplayName = "UserService.RequestToBuySubscription(invalid, 1) should return FormatException.")]
        public void UserService_RequestToBuySubscription_invalid_1_should_return_FormatException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<FormatException>(
                    async () => await service.RequestToBuySubscription(new Cost() { Id = 1, Money = 1, Product = "" }, 1));

                Assert.Equal(typeof(FormatException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.RequestToBuySubscription(valid, 6) should return IndexOutOfRangeException.")]
        public void UserService_RequestToBuySubscription_valid_6_should_return_IndexOutOfRangeException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<IndexOutOfRangeException>(
                    async () => await service
                                .RequestToBuySubscription(new Cost() { Id = 1, Money = 3, Product = "opensource" }, 6));

                Assert.Equal(typeof(IndexOutOfRangeException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.CompleteBuySubcription(valid, 1) should return object id 1.")]
        public async void UserService_CompleteBuySubcription_valid_1_should_return_object_1()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = await service.CompleteBuySubcription(new Cost() { Id = 1, Money = 3, Product = "opensource" }, 1);

                Assert.Equal(1, result.Id);
            }
        }

        [Fact(DisplayName = "UserService.CompleteBuySubcription(invalid, 1) should return FormatException.")]
        public void UserService_CompleteBuySubcription_invalid_1_should_return_FormatException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<FormatException>(
                    async () => await service.CompleteBuySubcription(new Cost() { Id = 1, Money = 1, Product = "" }, 1));

                Assert.Equal(typeof(FormatException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.CompleteBuySubcription(valid, 6) should return IndexOutOfRangeException.")]
        public void UserService_CompleteBuySubcription_valid_6_should_return_IndexOutOfRangeException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<IndexOutOfRangeException>(
                    async () => await service
                                .CompleteBuySubcription(new Cost() { Id = 1, Money = 3, Product = "opensource" }, 6));

                Assert.Equal(typeof(IndexOutOfRangeException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.AddFileToOpenSource(valid, 1) should return object type image/png.")]
        public async void UserService_AddFileToOpenSource_valid_1_should_return_object_type_image_png()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );
                var result = await service.AddFileToOpenSource(new ApiFileToAddModel()
                {
                    UserId = 1,
                    #region Base64 data
                    Data = "iVBORw0KGgoAAAANSUhEUgAABjQAAAaoCAYAAAAkuTKqAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAP + lSURBVHhe7P1PaFxpnid6 / zz3HWZ2Nn2Hl5emuTBKSZkjkobxQtVD + vIubttJoKxBuXBurUU6Iw1Nhe + LnaSLbBi4HgQtLxwNL84o50JioOGmF6W691UHZdObwjlFiRzDFI0gQ7IXsxlqMVUyVEP9Wfg9z4lzpJAs2SHr34mIzyc5Gec88ZyIY + lRxInzjed5zrzIBAAAAAAAQIX9s + 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",
                    #endregion
                    Name = "PhotoProfile1",
                    Type = "image/png"
                }, 1);

                Assert.Equal("image/png", result.Type);
            }
        }

        [Fact(DisplayName = "UserService.AddFileToOpenSource(invalid, 1) should return FormatException.")]
        public void UserService_AddFileToOpenSource_invalid_1_should_return_FormatException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<FormatException>(
                    async () => await service.AddFileToOpenSource(new ApiFileToAddModel()
                    {
                        UserId = 1,
                        #region Base64 data
                        Data = "iVBORw0KGgoAAAANSUhEUgAABjQAAAaoCAYAAAAkuTKqAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAP + lSURBVHhe7P1PaFxpnid6 / zz3HWZ2Nn2Hl5emuTBKSZkjkobxQtVD + vIubttJoKxBuXBurUU6Iw1Nhe + LnaSLbBi4HgQtLxwNL84o50JioOGmF6W691UHZdObwjlFiRzDFI0gQ7IXsxlqMVUyVEP9Wfg9z4lzpJAs2SHr34mIzyc5Gec88ZyIY + lRxInzjed5zrzIBAAAAAAAQIX9s + IWAAAAAACgsgQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + ",
                        #endregion
                        Name = "PhotoProfile1",
                        Type = ""
                    }, 1));

                Assert.Equal(typeof(FormatException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.AddFileToOpenSource(valid, 6) should return IndexOutOfRangeException.")]
        public void UserService_AddFileToOpenSource_valid_6_should_return_IndexOutOfRangeException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<IndexOutOfRangeException>(
                    async () => await service.AddFileToOpenSource(new ApiFileToAddModel()
                    {
                        UserId = 6,
                        #region Base64 data
                        Data = "iVBORw0KGgoAAAANSUhEUgAABjQAAAaoCAYAAAAkuTKqAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAP + lSURBVHhe7P1PaFxpnid6 / zz3HWZ2Nn2Hl5emuTBKSZkjkobxQtVD + vIubttJoKxBuXBurUU6Iw1Nhe + LnaSLbBi4HgQtLxwNL84o50JioOGmF6W691UHZdObwjlFiRzDFI0gQ7IXsxlqMVUyVEP9Wfg9z4lzpJAs2SHr34mIzyc5Gec88ZyIY + lRxInzjed5zrzIBAAAAAAAQIX9s + IWAAAAAACgsgQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + gAQAAAAAAVJ5AAwAAAAAAqDyBBgAAAAAAUHkCDQAAAAAAoPIEGgAAAAAAQOUJNAAAAAAAgMoTaAAAAAAAAJUn0AAAAAAAACpPoAEAAAAAAFSeQAMAAAAAAKg8gQYAAAAAAFB5Ag0AAAAAAKDyBBoAAAAAAEDlCTQAAAAAAIDKE2gAAAAAAACVJ9AAAAAAAAAqT6ABAAAAAABUnkADAAAAAACoPIEGAAAAAABQeQINAAAAAACg8gQaAAAAAABA5Qk0AAAAAACAyhNoAAAAAAAAlSfQAAAAAAAAKk + ",
                        #endregion
                        Name = "PhotoProfile1",
                        Type = "image/png"
                    }, 1));

                Assert.Equal(typeof(IndexOutOfRangeException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.RemoveFileFromOpenSource(1, 1) should return object.")]
        public async void UserService_RemoveFileFromOpenSource_valid_1_should_return_object_type_image_png()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );
                var result = await service.RemoveFileFromOpenSource(1, 1);

                Assert.Equal(typeof(ApiFileToReturnModel), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.RemoveFileFromOpenSource(6, 1) should return IndexOutOfRangeException.")]
        public void UserService_RemoveFileFromOpenSource_valid_6_should_return_IndexOutOfRangeException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<IndexOutOfRangeException>(
                    async () => await service.RemoveFileFromOpenSource(6, 1));

                Assert.Equal(typeof(IndexOutOfRangeException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.RemoveFileFromOpenSource(1, 2) should return InvalidOperationException.")]
        public void UserService_RemoveFileFromOpenSource_valid_6_should_return_InvalidOperationException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<InvalidOperationException>(
                    async () => await service.RemoveFileFromOpenSource(1, 2));

                Assert.Equal(typeof(InvalidOperationException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.AddOrder(valid, 1) should return object id 1.")]
        public async void UserService_AddOrder_valid_1_should_return_object_1()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );
                var result = await service.AddOrder(new ApiOrderDetailsModel()
                {
                    Id = 1,
                    Attachments = null,
                    Customer = new ApiUserDescriptionModel()
                    {
                        Id = 1,
                        UserInformation = new ApiUserInformationModel()
                        {
                            Id = 1,
                            IsBanned = false,
                            IsFreeTrial = false,
                            IsGaranted = false,
                            IsSubscribedExecutor = false,
                            IsSubscribedOpenSource = false,
                            LoginName = "login1",
                            Role = "user",
                            TelephoneNumber = "+375331111111"
                        },
                        Description = "desc",
                        FirstName = "fname",
                        LastName = "lname"
                    },
                    Executor = null,
                    Description = "description",
                    Skills = null,
                    State = null,
                    Title = "title"
                }, 1);

                Assert.Equal(1, result.Id);
            }
        }

        [Fact(DisplayName = "UserService.AddOrder(invalid, 1) should return FormatException.")]
        public void UserService_AddOrder_invalid_1_should_return_FormatException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<FormatException>(
                    async () => await service.AddOrder(new ApiOrderDetailsModel()
                    {
                        Id = 1,
                        Attachments = null,
                        Customer = null,
                        Executor = null,
                        Description = "description",
                        Skills = null,
                        State = null,
                        Title = "title"
                    }, 1));

                Assert.Equal(typeof(FormatException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.AddOrder(valid, 6) should return IndexOutOfRangeException.")]
        public void UserService_AddOrder_valid_6_should_return_IndexOutOfRangeException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<IndexOutOfRangeException>(
                    async () => await service.AddOrder(new ApiOrderDetailsModel()
                    {
                        Id = 1,
                        Attachments = null,
                        Customer = new ApiUserDescriptionModel()
                        {
                            Id = 6,
                            UserInformation = new ApiUserInformationModel()
                            {
                                Id = 6,
                                IsBanned = false,
                                IsFreeTrial = false,
                                IsGaranted = false,
                                IsSubscribedExecutor = false,
                                IsSubscribedOpenSource = false,
                                LoginName = "login1",
                                Role = "user",
                                TelephoneNumber = "+375331111111"
                            },
                            Description = "desc",
                            FirstName = "fname",
                            LastName = "lname"
                        },
                        Executor = null,
                        Description = "description",
                        Skills = null,
                        State = null,
                        Title = "title"
                    }, 1));

                Assert.Equal(typeof(IndexOutOfRangeException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.StartExecuteOrder(6, 1, 2) should return object id 6.")]
        public async void UserService_StartExecuteOrder_valid_1_should_return_object_1()
        {
            using (Context = new TestDbContext().Context)
            {
                var orderDetRep = new OrderDetailsRepository(Context);
                var stateRep = new StateRepository(Context);
                await stateRep.AddAsync(new State() { Id = 6, InProgress = false, IsCompleted = false });
                await orderDetRep.AddAsync(new OrderDetails() { Id = 1, Description = "desc", Title = "desc", StateId = 6, CustomerId = 1, ExecutorId = null });

                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    orderDetRep,
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    stateRep,
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = await service.StartExecuteOrder(6, 1, 2);

                Assert.Equal(6, result.Id);
            }
        }

        [Fact(DisplayName = "UserService.StartExecuteOrder(7, 1, 2) should return IndexOutOfRangeException.")]
        public void UserService_StartExecuteOrder_valid_6_should_return_IndexOutOfRangeException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<IndexOutOfRangeException>(
                    async () => await service.StartExecuteOrder(7, 1, 2));

                Assert.Equal(typeof(IndexOutOfRangeException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.CloseOrder(1, 1) should return object id 1.")]
        public async void UserService_CloseOrder_1_1_should_return_object_1()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );
                var result = await service.CloseOrder(1, 1);

                Assert.Equal(1, result.Id);
            }
        }

        [Fact(DisplayName = "UserService.CloseOrder(6, 1) should return ArgumentNullException.")]
        public void UserService_CloseOrder_6_1_should_return_ArgumentNullException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<ArgumentNullException>(
                    async () => await service.CloseOrder(6, 1));

                Assert.Equal(typeof(ArgumentNullException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.CloseOrder(1, 6) should return IndexOutOfRangeException.")]
        public void UserService_CloseOrder_valid_6_should_return_IndexOutOfRangeException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<IndexOutOfRangeException>(
                    async () => await service.CloseOrder(1, 6));

                Assert.Equal(typeof(IndexOutOfRangeException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.AddReview(valid, 1) should return object id 1.")]
        public async void UserService_AddReview_valid_1_should_return_object_1()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = await service.AddReview(new ApiReviewModel()
                {
                    Id = 6,
                    Description = "aasdf",
                    Raiting = 5,
                    ReviewOwner = new ApiUserDescriptionModel()
                    {
                        Id = 1,
                        UserInformation = new ApiUserInformationModel()
                        {
                            Id = 1,
                            IsBanned = false,
                            IsFreeTrial = false,
                            IsGaranted = false,
                            IsSubscribedExecutor = false,
                            IsSubscribedOpenSource = false,
                            LoginName = "login1",
                            Role = "user",
                            TelephoneNumber = "+375331111111"
                        },
                        Description = "desc",
                        FirstName = "fname",
                        LastName = "lname"
                    },
                    ReviewRecipient = new ApiUserDescriptionModel()
                    {
                        Id = 2,
                        UserInformation = new ApiUserInformationModel()
                        {
                            Id = 2,
                            IsBanned = false,
                            IsFreeTrial = false,
                            IsGaranted = false,
                            IsSubscribedExecutor = false,
                            IsSubscribedOpenSource = false,
                            LoginName = "login1",
                            Role = "user",
                            TelephoneNumber = "+375331111111"
                        },
                        Description = "desc",
                        FirstName = "fname",
                        LastName = "lname"
                    },
                    Title = "qsaddfasdf"
                }, 1);

                Assert.Equal(1, result.Id);
            }
        }

        [Fact(DisplayName = "UserService.AddReview(invalid, 1) should return FormatException.")]
        public void UserService_AddReview_invalid_1_should_return_FormatException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<FormatException>(
                    async () => await service.AddReview(new ApiReviewModel()
                    {
                        Id = 6,
                        Description = "",
                        Raiting = 5,
                        ReviewOwner = new ApiUserDescriptionModel()
                        {
                            Id = 1,
                            UserInformation = new ApiUserInformationModel()
                            {
                                Id = 1,
                                IsBanned = false,
                                IsFreeTrial = false,
                                IsGaranted = false,
                                IsSubscribedExecutor = false,
                                IsSubscribedOpenSource = false,
                                LoginName = "login1",
                                Role = "user",
                                TelephoneNumber = "+375331111111"
                            },
                            Description = "desc",
                            FirstName = "fname",
                            LastName = "lname"
                        },
                        ReviewRecipient = new ApiUserDescriptionModel()
                        {
                            Id = 2,
                            UserInformation = new ApiUserInformationModel()
                            {
                                Id = 2,
                                IsBanned = false,
                                IsFreeTrial = false,
                                IsGaranted = false,
                                IsSubscribedExecutor = false,
                                IsSubscribedOpenSource = false,
                                LoginName = "login1",
                                Role = "user",
                                TelephoneNumber = "+375331111111"
                            },
                            Description = "desc",
                            FirstName = "fname",
                            LastName = "lname"
                        },
                        Title = ""
                    }, 1));

                Assert.Equal(typeof(FormatException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.AddReview(valid, 6) should return IndexOutOfRangeException.")]
        public void UserService_AddReview_valid_6_should_return_IndexOutOfRangeException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<IndexOutOfRangeException>(
                    async () => await service.AddReview(new ApiReviewModel()
                    {
                        Id = 6,
                        Description = "aasdf",
                        Raiting = 5,
                        ReviewOwner = new ApiUserDescriptionModel()
                        {
                            Id = 7,
                            UserInformation = new ApiUserInformationModel()
                            {
                                Id = 7,
                                IsBanned = false,
                                IsFreeTrial = false,
                                IsGaranted = false,
                                IsSubscribedExecutor = false,
                                IsSubscribedOpenSource = false,
                                LoginName = "login1",
                                Role = "user",
                                TelephoneNumber = "+375331111111"
                            },
                            Description = "desc",
                            FirstName = "fname",
                            LastName = "lname"
                        },
                        ReviewRecipient = new ApiUserDescriptionModel()
                        {
                            Id = 2,
                            UserInformation = new ApiUserInformationModel()
                            {
                                Id = 2,
                                IsBanned = false,
                                IsFreeTrial = false,
                                IsGaranted = false,
                                IsSubscribedExecutor = false,
                                IsSubscribedOpenSource = false,
                                LoginName = "login1",
                                Role = "user",
                                TelephoneNumber = "+375331111111"
                            },
                            Description = "desc",
                            FirstName = "fname",
                            LastName = "lname"
                        },
                        Title = "qsaddfasdf"
                    }, 7));

                Assert.Equal(typeof(IndexOutOfRangeException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.GetOpenSourceAttachments(2, 2) should return 1 object.")]
        public async void UserService_GetOpenSourceAttachments_2_2_should_return_1_object()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = await service.GetOpenSourceAttachments(2, 2);

                Assert.Equal(1, result.Count());
            }
        }

        [Fact(DisplayName = "UserService.GetOpenSourceAttachments(6, 2) should return ArgumentNullException.")]
        public void UserService_GetOpenSourceAttachments_6_2_should_return_ArgumentNullException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<ArgumentNullException>(
                    async () => await service
                                .GetOpenSourceAttachments(6, 2));

                Assert.Equal(typeof(ArgumentNullException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.GetOpenSourceAttachments(2, 5) should return UnauthorizedAccessException.")]
        public void UserService_GetOpenSourceAttachments_2_5_should_return_UnauthorizedAccessException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<UnauthorizedAccessException>(
                    async () => await service
                                .GetApiOrderDetailsModel(2, 5));

                Assert.Equal(typeof(UnauthorizedAccessException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.OpenSourceDownloadFile(2, 2) should return second object.")]
        public async void UserService_OpenSourceDownloadFile_1_1_should_return_second_object()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = await service.OpenSourceDownloadFile(2, 2);

                Assert.Equal(2, result.Id);
            }
        }

        [Fact(DisplayName = "UserService.OpenSourceDownloadFile(6, 2) should return ArgumentNullException.")]
        public void UserService_OpenSourceDownloadFile_6_2_should_return_ArgumentNullException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<ArgumentNullException>(
                    async () => await service
                                .OpenSourceDownloadFile(6, 2));

                Assert.Equal(typeof(ArgumentNullException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.OpenSourceDownloadFile(2, 5) should return UnauthorizedAccessException.")]
        public void UserService_OpenSourceDownloadFile_2_5_should_return_UnauthorizedAccessException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<UnauthorizedAccessException>(
                    async () => await service
                                .OpenSourceDownloadFile(2, 5));

                Assert.Equal(typeof(UnauthorizedAccessException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.ValidateEmail(valid, 1) should return true.")]
        public async void UserService_ValidateEmail_valid_1_should_return_true()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = await service.ValidateEmail("111111", 1);

                Assert.True(result);
            }
        }

        [Fact(DisplayName = "UserService.ValidateEmail(invalid, 1) should return FormatException.")]
        public void UserService_ValidateEmail_invalid_1_should_return_FormatException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<FormatException>(
                    async () => await service.ValidateEmail("", 1));

                Assert.Equal(typeof(FormatException), result.GetType());
            }
        }

        [Fact(DisplayName = "UserService.ValidateEmail(valid, 6) should return IndexOutOfRangeException.")]
        public void UserService_ValidateEmail_valid_6_should_return_IndexOutOfRangeException()
        {
            using (Context = new TestDbContext().Context)
            {
                var service = new UserService(
                    new AttachmentRepository(Context),
                    new BanDescriptionRepository(Context),
                    new CityRepository(Context),
                    new CostRepository(Context),
                    new CountryRepository(Context),
                    new EducationRepository(Context),
                    new EducationTypeRepository(Context),
                    new EducationUserDescriptionRepository(Context),
                    new EmailDescriptionRepository(Context),
                    new ExecutorSkillRepository(Context),
                    new OpenSourceRepository(Context),
                    new OpenSourceAttachmentRepository(Context),
                    new OrderAttachmentRepository(Context),
                    new OrderDetailsRepository(Context),
                    new OrderSkillRepository(Context),
                    new PaymentTransactionRepository(Context),
                    new ReviewRepository(Context),
                    new RoleRepository(Context),
                    new SkillRepository(Context),
                    new StateRepository(Context),
                    new SubscriptionRepository(Context),
                    
                    new UserDescriptionRepository(Context),
                    new UserInformationRepository(Context),
                    new UserPictureRepository(Context),
                    new UserRegistrationRepository(Context),
                    new ValidationEmailRepository(Context),
                    new ValidationUserRepository(Context),
                    new CloseTransactionRepository(Context),
                    new OpenTransactionRepository(Context)
                    );

                var result = Assert.ThrowsAsync<IndexOutOfRangeException>(
                    async () => await service.ValidateEmail("111111", 7));

                Assert.Equal(typeof(IndexOutOfRangeException), result.GetType());
            }
        }
    }
}
